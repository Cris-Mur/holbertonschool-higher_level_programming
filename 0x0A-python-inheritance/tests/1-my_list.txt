==========================
 Doctest for MyList class
==========================

Import
======

    >>> MyList = __import__('1-my_list').MyList

Create instance
===============

	>>> my_list = MyList(6)
    	Traceback (most recent call last):
    		  ...
    	TypeError: 'int' object is not iterable

    	>>> my_list = MyList(-6)
    	Traceback (most recent call last):
    		  ...
    	TypeError: 'int' object is not iterable

    	>>> my_list = MyList(6, 2)
    	Traceback (most recent call last):
    		  ...
    	TypeError: list expected at most 1 argument, got 2

    	>>> my_list = MyList()

Check Type and instance
=======================

	>>> type(my_list) == MyList
    	True

    	>>> type(my_list) == list
    	False

    	>>> isinstance(my_list, MyList)
    	True

    	>>> isinstance(my_list, list)
    	True

    	>>> issubclass(MyList, list)
    	True

   	>>> type(my_list.print_sorted)
   	<class 'method'>


Test Public Method Sorted
=========================

	>>> my_list.print_sorted(5)
     	Traceback (most recent call last):
     		  ...
     	TypeError: print_sorted() takes 1 positional argument but 2 were given

     	>>> my_list.print_sorted(5, 2)
     	Traceback (most recent call last):
     		  ...
     	TypeError: print_sorted() takes 1 positional argument but 3 were given

     	>>> my_list.print_sorted()
     	[]

     	>>> my_list.clear()

     	>>> my_list.append(2)
     	>>> my_list += [4]
     	>>> my_list.append(1)
     	>>> my_list.append(5)
     	>>> my_list.print_sorted()
     	[1, 2, 4, 5]

      	>>> my_list
     	[2, 4, 1, 5]

	>>> print(my_list)
      	[2, 4, 1, 5]

     	>>> my_list.clear()

	>>> my_list.append(-1)
     	>>> my_list.append(-4)
     	>>> my_list += [-8]
     	>>> my_list.append(-5)
     	>>> my_list.print_sorted()
     	[-8, -5, -4, -1]

     	>>> my_list.clear()

	>>> my_list.append(-1)
     	>>> my_list.append(4)
     	>>> my_list.append(-8)
     	>>> my_list += [5]
     	>>> my_list.print_sorted()
     	[-8, -1, 4, 5]

     	>>> my_list.clear()

    	>>> my_list.append(2)
    	>>> my_list.append(2)
    	>>> my_list.append(5)
    	>>> my_list.append(1)
    	>>> my_list.print_sorted()
    	[1, 2, 2, 5]

    	>>> my_list.clear()

    	>>> my_list.append(-2)
    	>>> my_list.append(-2)
    	>>> my_list.append(5)
    	>>> my_list.append(1)
    	>>> my_list.print_sorted()
        [-2, -2, 1, 5]

    	 >>> my_list.clear()

	>>> my_list.append(2)
    	>>> my_list.print_sorted()
    	[2]

	>>> my_list.clear()

    	>>> my_list.append(-2)
    	>>> my_list.print_sorted()
    	[-2]

	>>> my_list.clear()

	>>> my_list.append(4)

    	>>> my_list.append(-4)

    	>>> my_list.append(4, 1)
    	Traceback (most recent call last):
    		  ...
    	TypeError: append() takes exactly one argument (2 given)

    	>>> my_list.clear()

    	>>> my_list.clear(4)
    	Traceback (most recent call last):
    		  ...
    	TypeError: clear() takes no arguments (1 given)

   	>>> my_list.copy()
   	[]

   	>>> my_list.append(4)
   	>>> my_list.append(-4)
   	>>> my_list.copy()
   	[4, -4]

   	>>> my_list.copy(4)
   	Traceback (most recent call last):
   		  ...
   	TypeError: copy() takes no arguments (1 given)

   	>>> my_list.count()
   	Traceback (most recent call last):
   		  ...
   	TypeError: count() takes exactly one argument (0 given)

   	>>> my_list.clear()
	>>> my_list.append(4)
   	>>> my_list.append(-3)
   	>>> my_list.append(-3)

   	>>> my_list.count(4)
   	1

   	>>> my_list.count(-3)
   	2

   	>>> my_list.extend(3)
   	Traceback (most recent call last):
   		  ...
   	TypeError: 'int' object is not iterable

   	>>> my_list.extend([3, -3])

   	>>> my_list.index(-3)
   	1

   	>>> my_list.index(1)
   	Traceback (most recent call last):
   	...
   	ValueError: 1 is not in list

    	>>> my_list.insert(0, 5)

    	>>> my_list.insert(-1, 5)

    	>>> my_list.insert(5)
    	Traceback (most recent call last):
    		  ...
    	TypeError: insert expected 2 arguments, got 1
    	>>> my_list.pop()
    	-3

    	>>> my_list.pop(0)
    	5

    	>>> my_list.remove(3)

    	>>> my_list.remove(8)
    	Traceback (most recent call last):
    		  ...
    	ValueError: list.remove(x): x not in list

    	>>> my_list.reverse(5)
    	Traceback (most recent call last):
    		  ...
    	TypeError: reverse() takes no arguments (1 given)

    	>>> my_list.sort(5)
    	Traceback (most recent call last):
    		  ...
    	TypeError: sort() takes no positional arguments
